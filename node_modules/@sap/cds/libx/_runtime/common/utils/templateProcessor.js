const DELIMITER = require('./templateDelimiter')

const _formatRowContext = (tKey, keyNames, row) => {
  const keyValuePairs = keyNames.map(key => `${key}=${row[key]}`)
  const keyValuePairsSerialized = keyValuePairs.join(',')
  return `${tKey}(${keyValuePairsSerialized})`
}

const _processElement = (processFn, row, key, target, picked = {}, isRoot, pathSegments) => {
  const element = (target.elements || target.params)[key]
  const { plain } = picked

  if (!plain) return
  /**
   * @type import('../../types/api').templateElementInfo
   */
  const elementInfo = { row, key, element, target, plain, isRoot, pathSegments }
  if (!element && target._flat2struct && target._flat2struct[key] && elementInfo.pathSegments) {
    elementInfo.pathSegments = pathSegments.slice(0)
    elementInfo.pathSegments.push(...target._flat2struct[key])
  }
  processFn(elementInfo)
}

const _processRow = (processFn, row, template, tKey, tValue, isRoot, pathOptions) => {
  const { template: subTemplate, picked } = tValue
  const key = tKey.split(DELIMITER).pop()

  _processElement(processFn, row, key, template.target, picked, isRoot, pathOptions.pathSegments)

  // process deep
  if (subTemplate && typeof row === 'object' && row) {
    _processComplex(processFn, row, subTemplate, key, pathOptions)
  }
}

const _getTargetKeyNames = target => {
  const keyNames = []
  for (const keyName in target.keys) {
    if (target.keys[keyName].__isAssociationStrict) continue
    keyNames.push(keyName)
  }
  return keyNames
}

const _processComplex = (processFn, row, template, key, pathOptions) => {
  const value = row && row[key]
  const rows = Array.isArray(value) ? value : [value]
  if (rows.length === 0) return
  const keyNames = _getTargetKeyNames(template.target)

  for (let idx = 0; idx < rows.length; idx++) {
    const row = rows[idx]
    if (row == null) continue
    const args = { processFn, row, template, isRoot: false, pathOptions }

    let rowContext
    if (pathOptions.includeKeyValues) {
      if (pathOptions.rowKeysGenerator) pathOptions.rowKeysGenerator(keyNames, row, template)
      rowContext = _formatRowContext(key, keyNames, Object.assign({}, row, pathOptions.extraKeys))
    }

    if (pathOptions.pathSegments) pathOptions.pathSegments.push(rowContext || key)

    templateProcessor(args)

    if (pathOptions.pathSegments) pathOptions.pathSegments.pop()
  }
}

/**
 * @param {import("../../types/api").TemplateProcessor} args
 */
const templateProcessor = ({ processFn, row, template, isRoot = true, pathOptions = {} }) => {
  for (const [tKey, tValue] of template.elements) {
    _processRow(processFn, row, template, tKey, tValue, isRoot, pathOptions)
  }
}

module.exports = templateProcessor
