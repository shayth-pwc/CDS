const path = require('path')
const BuildTaskHandlerInternal = require('../buildTaskHandlerInternal')
const { FOLDER_GEN } = require('../../constants')
const ResourcesTarBuilder = require('../mtx/resourcesTarBuilder')

class MtxExtensionModuleBuilder extends BuildTaskHandlerInternal {
    init() {
        super.init()
        if (this.buildOptions.root === this.buildOptions.target) {
            this.task.dest = path.join(this.task.dest, FOLDER_GEN)
        }
    }

    async build() {
        const model = await this.model()
        if (!model) {
            return
        }
        const allFiles = []
        const destExt = path.join(this.task.dest, 'ext')

        const packageJson = path.join(destExt, 'package.json')
        await this.copy(path.join(this.task.src, 'package.json')).to(packageJson)
        allFiles.push(packageJson)

        // extension CSN using parsed format
        const options = { ...this.options(), flavor: 'parsed' }
        const extCsn = await this.cds.load(this.resolveModel(), options)
        if (extCsn.requires) {
            extCsn.requires.length = 0
        }
        const csnFile = path.join(destExt, 'extension.csn')
        await this.compileToJson(extCsn, csnFile)
        allFiles.push(csnFile)

        // static i18n folder name as runtime does not use the CDS config of the extension project
        const i18n = await this.collectLanguageBundles(extCsn, path.join(destExt, 'i18n'))
        if (i18n) {
            allFiles.push(i18n.file)
        }

        const files = Object.keys(await this.cds.deploy.resources(model))
        if (files.length > 0) {
            const dataDest = path.join(destExt, 'data')
            await Promise.all(
                files
                    .filter(file => /\.csv$/.test(file))
                    .map(csv => {
                        const csvFile = path.join(dataDest, path.basename(csv))
                        allFiles.push(csvFile)
                        return this.copy(csv).to(csvFile)
                    })
            )
        }
        await new ResourcesTarBuilder(this).writeTarFile(allFiles, destExt, path.join(this.task.dest, 'extension.tgz'))
    }
}
module.exports = MtxExtensionModuleBuilder
