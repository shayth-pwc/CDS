{
  "title": "JSON schema for CDS configuration",
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "description": "This is a JSON schema representation for CDS project configuration",
  "type": "object",
  "additionalProperties": true,
  "properties": {
    "folders": {
      "type": "object",
      "description": "Only set folders if you don't want to use the defaults 'app/', 'db/', 'srv/'.",
      "additionalProperties": true,
      "properties": {
        "app": {
          "type": "string",
          "format": "uri-reference",
          "description": "Add a custom path for the app property, which becomes 'cds.roots'."
        },
        "db": {
          "type": "string",
          "format": "uri-reference",
          "description": "Add a custom path for the db property, which becomes 'cds.roots'."
        },
        "srv": {
          "type": "string",
          "format": "uri-reference",
          "description": "Add a custom path for the srv property, which becomes 'cds.roots'."
        }
      },
      "patternProperties": {
        ".+": {
          "description": "A static name identifying this folder."
        }
      }
    },
    "build": {
      "type": "object",
      "description": "Customize CDS build settings.",
      "additionalProperties": true,
      "properties": {
        "target": {
          "type": "string",
          "description": "Specify the folder which contains generated build results. Defaults to './gen'.",
          "format": "uri-reference"
        },
        "tasks": {
          "type": "array",
          "description": "Control which tasks 'cds build' will execute on your project modules. This is a typical task configuration: '\"tasks\": [{ \"for\": \"hana\"}];",
          "uniqueItems": true,
          "default": [
            {}
          ],
          "items": {
            "type": "object",
            "additionalProperties": true,
            "properties": {
              "dest": {
                "type": "string",
                "description": "Optional: Define the destination folder for this build task, relative to build target folder. \nFor example: Destination defined as 'custom' results in an output written to 'gen/custom'.",
                "format": "uri-reference"
              },
              "src": {
                "type": "string",
                "description": "Optional: Prefer defining 'cds.folders'. Use 'src' if you want it only to be valid for this specific build task, which excludes, for example, 'cds watch'.",
                "format": "uri-reference"
              },
              "for": {
                "type": "string",
                "description": "Define the target technology for this build task.",
                "minLength": 1,
                "enum": [
                  "nodejs",
                  "java",
                  "hana",
                  "mtx-sidecar",
                  "mtx",
                  "fiori",
                  "node-cf",
                  "java-cf"
                ]
              },
              "options": {
                "type": "object",
                "description": "Optional: Set target technology specific options for this build task.",
                "additionalProperties": true,
                "properties": {
                  "model": {
                    "$ref": "#/$defs/foldersStringArray"
                  }
                }
              }
            }
          }
        }
      }
    },
    "i18n": {
      "type": "object",
      "description": "Customize CDS translation settings.",
      "additionalProperties": true,
      "properties": {
        "default_language": {
          "type": "string"
        },
        "folders": {
          "description": "Define the list of folders containing language files. Defaults are '_i18n/', 'i18n/', and 'assets/i18n/'. First valid entry wins.",
          "default": [],
          "$ref": "#/$defs/foldersStringArray"
        }
      }
    },
    "deploy": {
      "type": "object",
      "description": "Customize 'cds deploy' settings.",
      "additionalProperties": true,
      "properties": {
        "no_save": {
          "type": "boolean",
          "description": "Do / don't update configuration in package.json.",
          "default": true
        }
      }
    },
    "requires": {
      "type": "object",
      "description": "List CDS dependencies to databases and services within the requires section.",
      "additionalProperties": true,
      "properties": {
        "auth": {
          "oneOf": [
            {
              "type": "string",
              "description": "Use standard auth-specific settings via shortcut.",
              "anyOf": [
                {
                  "$ref": "#/$defs/authType"
                },
                {
                  "minLength": 1
                }
              ]
            },
            {
              "type": "object",
              "description": "Use custom authentication settings.",
              "default": {},
              "additionalProperties": true,
              "properties": {
                "kind": {
                  "type": "string",
                  "description": "Define the kind of strategy.",
                  "anyOf": [
                    {
                      "$ref": "#/$defs/authType"
                    },
                    {
                      "minLength": 1
                    }
                  ]
                },
                "users": {
                  "$ref": "#/$defs/mockUsers"
                },
                "credentials": {
                  "type": "object",
                  "description": "You can explicitly configure credentials, but this is overruled by VCAP_SERVICES if a matching entry is found therein.",
                  "additionalProperties": true,
                  "properties": {
                    "database": {
                      "type": "string",
                      "format": "uri-reference"
                    }
                  }
                }
              }
            }
          ]
        },
        "db": {
          "oneOf": [
            {
              "type": "string",
              "description": "Use standard database-specific settings via shortcut.",
              "anyOf": [
                {
                  "$ref": "#/$defs/databaseType"
                },
                {
                  "minLength": 1
                }
              ]
            },
            {
              "type": "object",
              "description": "Use custom database-specific settings.",
              "default": {},
              "additionalProperties": true,
              "properties": {
                "kind": {
                  "type": "string",
                  "description": "Define the kind of dependency.",
                  "anyOf": [
                    {
                      "$ref": "#/$defs/databaseType"
                    },
                    {
                      "minLength": 1
                    }
                  ]
                },
                "model": {
                  "description": "Define the assigned model. Interpreted like Node.js 'requires' logic.",
                  "$ref": "#/$defs/foldersStringArray"
                },
                "credentials": {
                  "type": "object",
                  "description": "You can explicitly configure credentials, but this is overruled by VCAP_SERVICES if a matching entry is found therein.",
                  "additionalProperties": true,
                  "properties": {
                    "database": {
                      "type": "string",
                      "format": "uri-reference"
                    }
                  }
                },
                "vcap": {
                  "type": "object",
                  "description": "Optional: Used to select an entry in VCAP_SERVICES.",
                  "additionalProperties": true,
                  "properties": {
                    "name": {
                      "type": "string",
                      "minLength": 1
                    }
                  }
                }
              }
            }
          ]
        },
        "multitenancy": {
          "type": "boolean",
          "description": "Shortcut to enable multitenancy."
        },
        "extensibility": {
          "type": "boolean",
          "description": "Shortcut to enable extensibility."
        },
        "toggles": {
          "type": "boolean",
          "description": "Shortcut to enable feature toggles."
        },
        "cds.xt.ModelProviderService": {
          "description": "Configure if/how the ModelProviderService serves model variants that may include tenant-specific extensions and/or feature-toggled aspects.",
          "oneOf": [
            {
              "$ref": "#/$defs/serviceActivation"
            },
            {
              "$ref": "#/$defs/servicePresetSidecar"
            },
            {
              "type": "object",
              "description": "Configuration options",
              "additionalProperties": true,
              "properties": {
                "root": {
                  "type": "string",
                  "description": "A directory name, absolute or relative to the package.json's location, specifying the location to search for models and resources to be served by the model provider services. Default is undefined, for embedded usage of model provider. In case of a sidecar, it refers to the main app's model; usually '../..' during development, and '_main' in production.",
                  "format": "uri-reference"
                }
              }
            }
          ]
        },
        "cds.xt.ExtensibilityService": {
          "description": "Configure if/how the ExtensibilityService allows to add and activate tenant-specific extensions at runtime.",
          "oneOf": [
            {
              "$ref": "#/$defs/serviceActivation"
            },
            {
              "$ref": "#/$defs/extensionRestrictions"
            }
          ]
        },
        "cds.xt.DeploymentService": {
          "description": "Configure if/how the DeploymentService handles subscribe, unsubscribe, and upgrade events for single tenants and single apps/micro-services.",
          "oneOf": [
            {
              "$ref": "#/$defs/serviceActivation"
            },
            {
              "$ref": "#/$defs/servicePresetSidecar"
            }
          ]
        },
        "cds.xt.SaasProvisioningService": {
          "description": "De-/Activate the facade for the DeploymentService to adapt to the API expected by SAP BTP’s SaaS Provisioning Service, hence providing out-of-the-box integration.",
          "oneOf": [
            {
              "$ref": "#/$defs/serviceActivation"
            }
          ]
        }
      },
      "patternProperties": {
        ".+": {
          "oneOf": [
            {
              "type": "boolean",
              "description": "Add this type with default settings during runtime."
            },
            {
              "type": "string",
              "description": "A shortcut referencing a predefined configuration.",
              "anyOf": [
                {
                  "$ref": "#/$defs/authType"
                },
                {
                  "$ref": "#/$defs/databaseType"
                },
                {
                  "$ref": "#/$defs/serviceType"
                },
                {
                  "minLength": 1
                }
              ]
            },
            {
              "type": "object",
              "default": {},
              "additionalProperties": true,
              "properties": {
                "kind": {
                  "type": "string",
                  "description": "Kind of dependency.",
                  "anyOf": [
                    {
                      "$ref": "#/$defs/authType"
                    },
                    {
                      "$ref": "#/$defs/databaseType"
                    },
                    {
                      "$ref": "#/$defs/serviceType"
                    },
                    {
                      "minLength": 1
                    }
                  ]
                },
                "model": {
                  "description": "Assigned model. Interpreted like Node.js 'requires' logic.",
                  "$ref": "#/$defs/foldersStringArray"
                }
              }
            }
          ]
        }
      }
    }
  },
  "$defs": {
    "serviceType": {
      "oneOf": [
        {
          "const": "app-service",
          "description": "Standard app service"
        },
        {
          "const": "odata",
          "description": "OData service"
        },
        {
          "const": "odata-v2",
          "description": "OData service version 2"
        },
        {
          "const": "odata-v4",
          "description": "OData service version 4"
        },
        {
          "const": "rest",
          "description": "REST service"
        }
      ]
    },
    "authType": {
      "default": "mocked",
      "oneOf": [
        {
          "const": "mocked",
          "description": "Mocked authentication"
        },
        {
          "const": "basic",
          "description": "Basic authentication"
        },
        {
          "const": "jwt",
          "description": "JWT authentication"
        },
        {
          "const": "xsuaa",
          "description": "Authentication using XSUAA"
        },
        {
          "const": "dummy",
          "description": "Dummy authentication"
        }
      ]
    },
    "mockUsers": {
      "type": "object",
      "description": "List of users for local usage.",
      "properties": {
        "*": {
          "default": true,
          "oneOf": [
            {
              "const": true,
              "description": "Allow other users than the ones specified."
            },
            {
              "const": false,
              "description": "Block other users than the ones specified."
            }
          ]
        }
      },
      "patternProperties": {
        ".+": {
          "type": "object",
          "additionalProperties": true,
          "properties": {
            "roles": {
              "type": "array",
              "description": "Roles of the user.",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            },
            "features": {
              "type": "array",
              "description": "Feature toggle values of the user.",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            },
            "tenant": {
              "type": "string",
              "description": "SaaS tenant of the user."
            },
            "attr": {
              "type": "object",
              "description": "Additional user attributes.",
              "patternProperties": {
                ".+": {
                  "type": "string",
                  "description": "Attribute value"
                }
              }
            },
            "password": {
              "type": "string",
              "description": "User password"
            }
          }
        }
      }
    },
    "databaseType": {
      "default": "sqlite",
      "oneOf": [
        {
          "const": "hana",
          "description": "SAP HANA"
        },
        {
          "const": "hana-cloud",
          "description": "SAP HANA Cloud"
        },
        {
          "const": "hana-mt",
          "description": "Multitenant SAP HANA Cloud"
        },
        {
          "const": "sql",
          "description": "In-memory SQLite (development), SAP HANA (production)"
        },
        {
          "const": "sql-mt",
          "description": "File-based SQLite (development), Multitenant SAP HANA Cloud (production)"
        },
        {
          "const": "sqlite",
          "description": "File-based SQLite"
        }
      ]
    },
    "foldersStringArray": {
      "oneOf": [
        {
          "type": "string",
          "format": "uri-reference"
        },
        {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "format": "uri-reference"
          }
        }
      ]
    },
    "serviceActivation": {
      "type": "boolean",
      "description": "De-/Activate this service."
    },
    "servicePresetSidecar": {
      "type": "string",
      "description": "'in-sidecar' preset provides defaults for usage in sidecars.\n'from-sidecar' preset is a shortcut for '{ kind: rest }'.",
      "enum": [
        "in-sidecar",
        "from-sidecar"
      ]
    },
    "extensionRestrictions": {
      "type": "object",
      "description": "Extension restrictions",
      "additionalProperties": false,
      "properties": {
        "element-prefix": {
          "type": "array",
          "description": "Field names must start with one of these strings.",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "namespace-blocklist": {
          "type": "array",
          "description": "Namespaces must not start with these strings.",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "extension-allowlist": {
          "type": "array",
          "description": "Restrictions for model entities, types, etc.",
          "uniqueItems": true,
          "items": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "for": {
                "type": "array",
                "description": "Restriction applies to these namespaces.",
                "uniqueItems": true,
                "items": {
                  "type": "string"
                }
              },
              "kind": {
                "type": "string",
                "description": "Type of definition",
                "default": "entity",
                "enum": [
                  "action",
                  "annotation",
                  "context",
                  "entity",
                  "function",
                  "service",
                  "type"
                ]
              },
              "new-fields": {
                "type": "integer",
                "description": "Number of fields to be added at most.",
                "minimum": 1
              },
              "new-entities": {
                "type": "integer",
                "description": "Number of entities to be added at most",
                "minimum": 1
              }
            }
          }
        }
      }
    }
  }
}
