
function auth_factory (options) {
  const cds = require ('../index'), { path, local } = cds.utils
  const o = { ...options, ...cds.requires.auth }
  let kind = o.kind || o.strategy
  let middleware = cds.auth[kind]
  if (middleware) {
    cds.log().info ('using auth strategy:', { kind }, '\n')
  } else {
    let impl = o.impl || path.resolve (__dirname, kind)
    try { impl = require.resolve (impl) }  catch {
      throw cds.error `Cannot find auth impl: ${impl}`
    }
    cds.log().info ('using auth strategy:', { kind, impl: local(impl) }, '\n')
    middleware = require(impl)
  }
  return middleware(o)
}

const { lazified } = require('../lazy')
const _require = require; require = lazified (module) // eslint-disable-line no-global-assign

module.exports = lazified (Object.assign (auth_factory, {
  mocked: require('./basic-auth'),
  basic:  require('./basic-auth'),
  dummy:  require('./dummy-auth'),
  ias:    require('./ias-auth'),
  jwt:    require('./jwt-auth'),
  xsuaa:  require('./jwt-auth'),
}))

require = _require // eslint-disable-line no-global-assign
